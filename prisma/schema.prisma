generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model User {
  id                 String        @id @default(cuid())
  email              String        @unique
  stripeCustomerId   String?       @unique
  razorpayCustomerId String?       @unique
  createdAt          DateTime      @default(now())
  entitlements       Entitlement[]
  presets            Preset[]
  accounts           Account[]
  sessions           Session[]
}

enum PlanType {
  PRO_MONTHLY
  PRO_YEARLY
  LIFETIME
}

enum EntitlementStatus {
  active
  canceled
}

model Entitlement {
  id               String            @id @default(cuid())
  user             User              @relation(fields: [userId], references: [id])
  userId           String
  plan             PlanType
  status           EntitlementStatus @default(active)
  currentPeriodEnd DateTime?
  createdAt        DateTime          @default(now())
  updatedAt        DateTime          @updatedAt

  @@unique([userId, plan])
}

model Preset {
  id        String   @id @default(cuid())
  name      String
  payload   Json
  isPublic  Boolean  @default(false)
  user      User?    @relation(fields: [userId], references: [id])
  userId    String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  oauth_token       String?
  oauth_token_secret String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}
